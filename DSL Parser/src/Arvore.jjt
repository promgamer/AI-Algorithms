options{
  LOOKAHEAD = 1;  static = true;}PARSER_BEGIN(DSL)import java.io.*;public class DSL{  public static void main(String args [])  {    System.out.println("Reading from directory testUnits/");    File [] files;    File file = new File("testUnits/");    files = file.listFiles();    for (int i = 0; i < files.length; i++)    {      System.out.println("::: "+ files[i].getName()+" :::");      try      {        InputStream inputStream = new FileInputStream(files[i]);        new DSL(inputStream);        try        {          SimpleNode n = DSL.Start();          n.dump("");          System.out.println("Thank you.");        }        catch (Exception e)        {          System.out.println("Oops.");          System.out.println(e.getMessage());        }      }      catch (FileNotFoundException e)      {
          System.out.println("Oops.");
          System.out.println(e.getMessage());      }    }  }}PARSER_END(DSL)SKIP :{  " "| "\r"| "\t"| "\n"}/*OPERATORS */TOKEN :{  < IN : "in" >| < OUT : "out" >| < PLUS : "+" >| < MINUS : "-" >| < STAR : "*" >| < SLASH : "/" >| < FLOAT : "float" >| < INT : "int" >| < DOUBLE : "double" >| < LPAREN : "(" >| < RPAREN : ")" >| < LBRACKET : "[" >| < RBRACKET : "]" >| < SEMICOLON : ";" >| < ASSIGN : "=" >| < COLON : ":" >}//
TOKEN :{  < INTEGER : ([ "0"-"9" ])+ >| < DECIMAL_NUMBER : < INTEGER > "." < INTEGER >>| < VAR :    (      [ "A"-"Z", "a"-"z" ] ([ "0"-"9", "A"-"Z", "a"-"z" ])*    ) >| < ARROBAMAT : "@mat" >| < LETTERS : ([ "A"-"Z", "a"-"z" ])+ >}// /*@mat in int A[]; in float B[100]; out float C[]; C=A+B; */
SimpleNode Start() :{}{   parseDSL()  { return jjtThis; }}void parseDSL() :{}{  "/*@mat" dslStatements() "*/"}void dslStatements() :{}{  (    dslLine()  )+}void dslLine() :{}{  dslDeclaration() < SEMICOLON >| dslAtribution() < SEMICOLON >}void dslDataType() :{}{  < INT >| < FLOAT >| < DOUBLE >}void dslDeclaration() :{}{  < IN > dslDataType() < VAR > < LBRACKET > (< INTEGER >)? < RBRACKET >| < OUT > dslDataType() < VAR > < LBRACKET > < RBRACKET >}void dslAtribution() :{ /*Token t;*/}{  < VAR >  (    /*t = */    < ASSIGN > dslExpr()  | dslVarWithRange()  /*t = */< ASSIGN > dslExpr2()  ) /*
  {
    jjtThis.value = t.image;
  }*/}void dslVarWithRange() :{}{  < LPAREN > < INTEGER > < COLON > < INTEGER > < RPAREN >}void dslExpr() :{}{  dslTerm() dslTermTail()}void dslTerm() :{}{  dslFactor() dslFactorTail()}void dslTermTail() :{}{  dslAddOp() dslTerm() dslTermTail()|  {}}void dslFactor() :{}{  < LPAREN > dslExpr() < RPAREN >| < VAR >}void dslFactorTail() :{}{  dslMultOp() dslFactor() dslFactorTail()|  {}}// Handling the variables having inline range definedvoid dslExpr2() :{}{  dslTerm2() dslTermTail2()}void dslTerm2() :{}{  dslFactor2() dslFactorTail2()}void dslTermTail2() :{}{  dslAddOp() dslTerm2() dslTermTail2()|  {}}void dslFactor2() :{}{  < LPAREN > dslExpr2() < RPAREN >| < VAR > dslVarWithRange()}void dslFactorTail2() :{}{  dslMultOp() dslFactor2() dslFactorTail2()|  {}}void dslAddOp() :{}{  < PLUS >| < MINUS >}void dslMultOp() :{}{  < STAR >| < SLASH >}